---
import { type CollectionEntry, getCollection } from 'astro:content';
import ShortPost from '@layouts/ShortPost.astro';
import LongPost from '@layouts/LongPost.astro';
import NextPost from '@components/NextPost.astro'

export async function getStaticPaths() {
	const posts = (await getCollection('blog')).sort(
        (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf(),
    );
	
	return posts.map((post, index) => ({
		params: { slug: post.slug },
		props: {
			post,
			newer: posts[index - 1],
			older: posts[index + 1]
		}
	}));
}

interface Props {
	post: CollectionEntry<'blog'>,
	newer?: CollectionEntry<'blog'>,
	older?: CollectionEntry<'blog'>,
}

const {post, newer, older }= Astro.props;
const { Content } = await post.render();
---

{ post.data.type === 'short' 
	? <ShortPost {...post.data}> <Content />
		<div class="footer" slot="after">
			{newer && <div class="left"><NextPost title={newer.data.title} pubDate={newer.data.pubDate} path={'/blog/' + newer.slug} left>(newer)</NextPost></div>}
			{older && <div class="right"><NextPost title={older.data.title} pubDate={older.data.pubDate} path={'/blog/' + older.slug}>(older)</NextPost></div>}
		</div>
	  </ShortPost>
	: <LongPost {...post.data}> <Content /> 
		<div class="footer" slot="after">
			{newer && <div class="left"><NextPost title={newer.data.title} pubDate={newer.data.pubDate} path={'/blog/' + newer.slug} left>(newer)</NextPost></div>}
			{older && <div class="right"><NextPost title={older.data.title} pubDate={older.data.pubDate} path={'/blog/' + older.slug}>(older)</NextPost></div>}
		</div>
	</LongPost>
}
<style>
	.footer {
		display: flex;
		flex-flow: row nowrap;
		justify-content: space-between;
		gap: 35px;

		margin: 35px 0;
	}

</style>

